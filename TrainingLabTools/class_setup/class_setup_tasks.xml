<?xml version="1.0" encoding="UTF-8"?>
<project name="Setup exercise tasks">

	<loadproperties srcfile="../lib/exercise.properties" />
	
	<!-- Import stop-server and clean-slate targets -->
	<import file="../lib/utility.xml"/>

	<path id="basedir.path">
		<pathelement path="${basedir}" />
	</path>
	<pathconvert property="currentExerciseDir" targetos="unix" refid="basedir.path" />

	<!-- import task definitions to support if/then/else -->
	<taskdef resource="net/sf/antcontrib/antcontrib.properties">
		<classpath>
			<pathelement location="../lib/ant-contrib-1.0b3.jar" />
		</classpath>
	</taskdef>

	<!--variables -->
  <property name="solution.source.dir" value="solution" />
	<property name="verification.source.dir" value="verification" />

    <!-- This ant file can be used to complete the Class Setup exercise. As such, it has some redundant targets, such as
         'solution' for consistency with other exercise ant scripts.

         The public targets here are:
            1) solution  - performs a setup of the server, using the equivalent of the
                              commerce_developer recipe, calls verification (see below), initializes and archives the system .
            2) verification - loads the verification
                              script into the system.

         Internal targets:
            3) archive     - archives the ssystem state after preparation, so it can be
                                    restored by later exercises
            4) stop_server - stops hybris server (if it is currently started)
    -->

    <!--###### Class Setup Exercise - Public Targets ###### -->

    <!-- ____________________________________________________________
         1) Solution
      -->

	<target name="solution" depends="stop-server" description="performs installation">
		<!-- remove previous folders -->
		<if>
			<available file="${hybris.root.path}/config" type="dir" />
					<then>
                <tstamp>
        	        <format property="TIMESTAMP" pattern="yyyy.MM.dd_HH.mm"/>
                </tstamp>
                <mkdir dir="${installation.folder}/archive/previous_installation_${TIMESTAMP}"/>

       	        <move file="${hybris.root.path}/config"
        	        todir="${installation.folder}/archive/previous_installation_${TIMESTAMP}"/>
       	        <move file="${hybris.root.path}/data"
        	        todir="${installation.folder}/archive/previous_installation_${TIMESTAMP}"/>
       	        <move file="${hybris.root.path}/log"
        	        todir="${installation.folder}/archive/previous_installation_${TIMESTAMP}"/>
       	        <move file="${hybris.root.path}/roles"
        	        todir="${installation.folder}/archive/previous_installation_${TIMESTAMP}"/>
       	        <move file="${hybris.root.path}/temp"
        	        todir="${installation.folder}/archive/previous_installation_${TIMESTAMP}"/>

        	    <!-- Archive the two extensions that may have been altered by installing AddOns -->
                <copy todir="${installation.folder}/archive/previous_installation_${TIMESTAMP}">
                    <fileset dir="${hybris.root.path}/bin/modules/base-accelerator">
                        <include name="${hybris.root.path}/bin/modules/base-accelerator/yacceleratorstorefront/**" />
                    </fileset>
                </copy>
                <copy todir="${installation.folder}/archive/previous_installation_${TIMESTAMP}">
                    <fileset dir="${hybris.root.path}/bin/modules/commerce-services">
                        <include name="${hybris.root.path}/bin/modules/commerce-services/ycommercewebservices/**" />
                    </fileset>
                </copy>

                <!-- Archive any previous custom extensions -->
                <if>
                    <available file="${hybris.root.path}/bin/custom" type="dir" />
                    <then>
       	                <move file="${hybris.root.path}/bin/custom"
        	                todir="${installation.folder}/archive/previous_installation_${TIMESTAMP}"/>
			        </then>
			    </if>
			</then>
		</if>

		<!-- clean everything and set develop template for the installation -->
		<ant antfile="build.xml" target="clean" dir="${hybris.root.path}/bin/platform">
			<property name="input.template" value="develop" />
		</ant>

		<!-- generate dev extension -->
		<ant antfile="build.xml" target="extgen" dir="${hybris.root.path}/bin/platform">
			<property name="input.template" value="yempty" />
			<property name="input.name" value="dev" />
			<property name="input.package" value="de.hybris.training.dev" />
		</ant>

		<!-- copy projectdata-dev.impex and extensioninfo.xml to dev extension -->
		<copy file="../resources/commerce_developer/projectdata-dev.impex"
			todir="${hybris.root.path}/bin/custom/dev/resources/impex" overwrite="true" />

		<copy file="../resources/commerce_developer/extensioninfo.xml"
			todir="${hybris.root.path}/bin/custom/dev" overwrite="true" />

		<!-- copy spartacussampledata extension -->
		<copy todir="${hybris.root.path}/bin/custom/spartacussampledata">
            <fileset dir="../resources/commerce_developer/spartacussampledata">
            </fileset>
        </copy>


		<!-- set the initial extensions and properties -->
		<copy file="${solution.source.dir}/localextensions.xml"
			tofile="${hybris.root.path}/config/localextensions.xml" overwrite="true" />
		<copy file="${solution.source.dir}/local.properties"
			tofile="${hybris.root.path}/config/local.properties" overwrite="true" />

		<!-- install AddOns -->
		<ant antfile="build.xml" target="addoninstall" dir="${hybris.root.path}/bin/platform">
			<property name="addonnames" value="smarteditaddon,pcmbackofficesamplesaddon,customerinterestsaddon,stocknotificationaddon" />
			<property name="addonStorefront.yacceleratorstorefront" value="yacceleratorstorefront" />
		</ant>

		<!-- build and initialize the platform for first time -->
		<ant antfile="build.xml" target="initialize" dir="${hybris.root.path}/bin/platform">
			<property name="tenant" value="master" />
		</ant>

		<!-- load the verification scripts -->
		<antcall target="verification"/>

    	<!-- Archive post-install blank slate -->
    	<antcall target="archive"/>

		<echo>Class setup exercise solution completed.</echo>
	</target>

    <!-- ____________________________________________________________
         2) Verification
      -->
			<target name="verification"  description="loads verification scripts into the system">
	    	<path id="basedir.path">
	    	    <pathelement path="${basedir}" />
	    	</path>
	    	<pathconvert targetos="unix" property="basedir.slashed" refid="basedir.path" />
	    	<ant antfile="build.xml" target="importImpex" dir="${hybris.root.path}/bin/platform" >
					<property name="resource" value="${basedir.slashed}/${verification.source.dir}/verifyExercises.impex" />
				</ant>
				<copy file="${verification.source.dir}/Logger.groovy" tofile="${hybris.root.path}/bin/platform/Logger.groovy" overwrite="true" />
	    </target>

    <!--###### Class Setup Exercise - Internal Targets ###### -->
    <!-- ____________________________________________________________
         3) Archive
      -->
		<target name="archive" description="Archives clean slate">

		<!-- Archive the initial state of the system to allow each exercise to return to a blank slate -->
	    <mkdir dir="${installation.folder}/archive/"/>
	    <zip destfile="${installation.folder}/archive/data.zip" basedir="${hybris.root.path}/data"/>
	    <zip destfile="${installation.folder}/archive/config.zip" basedir="${hybris.root.path}/config"/>
	    <zip destfile="${installation.folder}/archive/bootstrap.zip" basedir="${hybris.root.path}/bin/platform/bootstrap"/>
	    

		<echo>Clean exercise installation successfully archived.</echo>

    </target>

</project>
